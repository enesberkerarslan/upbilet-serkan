// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240802031354_UpdateSaleWithNullablePaymentPeriod")]
    partial class UpdateSaleWithNullablePaymentPeriod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.ActivityEntity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<bool>("MainPage")
                        .HasColumnType("bit");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AdressEntity", b =>
                {
                    b.Property<int>("AdressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressId"));

                    b.Property<string>("AdressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AdvertEntity", b =>
                {
                    b.Property<int>("AdvertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertId"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("Adminapproval")
                        .HasColumnType("bit");

                    b.Property<int>("AdvertTicketPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SalesType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldPiece")
                        .HasColumnType("int");

                    b.Property<int>("TotalPiece")
                        .HasColumnType("int");

                    b.Property<string>("TribuneBlok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TribuneCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TribuneLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AdvertId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BankAccountEntity", b =>
                {
                    b.Property<int>("BandAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandAccountId"));

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BandAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CustomerInformationEntity", b =>
                {
                    b.Property<int>("CustomerInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInformationId"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyTicketsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerInformationId");

                    b.HasIndex("MyTicketsId");

                    b.HasIndex("SalesId");

                    b.ToTable("CustomerInformations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.LeagueEntity", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"));

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MyTicketsEntity", b =>
                {
                    b.Property<int>("MyTicketsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MyTicketsId"));

                    b.Property<int>("Costs")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MyTicketsId");

                    b.HasIndex("UserId");

                    b.ToTable("MyTickets");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentPeriodEntity", b =>
                {
                    b.Property<int>("PaymentPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentPeriodId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentPeriodId");

                    b.ToTable("PaymentPeriods");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SalesEntity", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesId"));

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SalesPiece")
                        .HasColumnType("int");

                    b.Property<string>("SalesSituation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesId");

                    b.HasIndex("AdvertId");

                    b.HasIndex("PaymentPeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumCategoryBlockEntity", b =>
                {
                    b.Property<int>("StadiumCategoryBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadiumCategoryBlockId"));

                    b.Property<string>("StadiumCategoryBlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StadiumCategoryBlockId");

                    b.HasIndex("StadiumCategoryId");

                    b.ToTable("StadiumCategoryBlocks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumCategoryEntity", b =>
                {
                    b.Property<int>("StadiumCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadiumCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StadiumCategoryId");

                    b.HasIndex("StadiumId");

                    b.ToTable("StadiumCategories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumEntity", b =>
                {
                    b.Property<int>("StadiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadiumId"));

                    b.Property<string>("StadiumImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StadiumId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeamEntity", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ActivityEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.TeamEntity", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EntityLayer.Concrete.CategoryEntity", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.TeamEntity", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EntityLayer.Concrete.LeagueEntity", "League")
                        .WithMany("Activities")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EntityLayer.Concrete.StadiumEntity", "Stadium")
                        .WithMany("Activities")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Category");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AdressEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.UserEntity", "user")
                        .WithMany("adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AdvertEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.ActivityEntity", "activity")
                        .WithMany("Adverts")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.UserEntity", "user")
                        .WithMany("adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("activity");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BankAccountEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.UserEntity", "user")
                        .WithMany("bankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CustomerInformationEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.MyTicketsEntity", "MyTickets")
                        .WithMany("CustomerInformation")
                        .HasForeignKey("MyTicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.SalesEntity", "Sales")
                        .WithMany("CustomerInformation")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MyTickets");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MyTicketsEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.UserEntity", "user")
                        .WithMany("tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SalesEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AdvertEntity", "Advert")
                        .WithMany("sales")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.PaymentPeriodEntity", "PaymentPeriod")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EntityLayer.Concrete.UserEntity", "User")
                        .WithMany("sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("PaymentPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumCategoryBlockEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.StadiumCategoryEntity", "StadiumCategory")
                        .WithMany("StadiumCategoryBlocks")
                        .HasForeignKey("StadiumCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StadiumCategory");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumCategoryEntity", b =>
                {
                    b.HasOne("EntityLayer.Concrete.StadiumEntity", "Stadium")
                        .WithMany("StadiumCategories")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("EntityLayer.Concrete.ActivityEntity", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AdvertEntity", b =>
                {
                    b.Navigation("sales");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CategoryEntity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.LeagueEntity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.MyTicketsEntity", b =>
                {
                    b.Navigation("CustomerInformation");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentPeriodEntity", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SalesEntity", b =>
                {
                    b.Navigation("CustomerInformation");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumCategoryEntity", b =>
                {
                    b.Navigation("StadiumCategoryBlocks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StadiumEntity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("StadiumCategories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeamEntity", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserEntity", b =>
                {
                    b.Navigation("adresses");

                    b.Navigation("adverts");

                    b.Navigation("bankAccounts");

                    b.Navigation("sales");

                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
